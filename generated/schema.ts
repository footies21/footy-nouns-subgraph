// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FootyNoun extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("background", Value.fromBigInt(BigInt.zero()));
    this.set("kit", Value.fromBigInt(BigInt.zero()));
    this.set("head", Value.fromBigInt(BigInt.zero()));
    this.set("glasses", Value.fromBigInt(BigInt.zero()));
    this.set("number", Value.fromBigInt(BigInt.zero()));
    this.set("club", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FootyNoun entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FootyNoun must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FootyNoun", id.toString(), this);
    }
  }

  static load(id: string): FootyNoun | null {
    return changetype<FootyNoun | null>(store.get("FootyNoun", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get background(): BigInt {
    let value = this.get("background");
    return value!.toBigInt();
  }

  set background(value: BigInt) {
    this.set("background", Value.fromBigInt(value));
  }

  get kit(): BigInt {
    let value = this.get("kit");
    return value!.toBigInt();
  }

  set kit(value: BigInt) {
    this.set("kit", Value.fromBigInt(value));
  }

  get head(): BigInt {
    let value = this.get("head");
    return value!.toBigInt();
  }

  set head(value: BigInt) {
    this.set("head", Value.fromBigInt(value));
  }

  get glasses(): BigInt {
    let value = this.get("glasses");
    return value!.toBigInt();
  }

  set glasses(value: BigInt) {
    this.set("glasses", Value.fromBigInt(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value!.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get club(): string {
    let value = this.get("club");
    return value!.toString();
  }

  set club(value: string) {
    this.set("club", Value.fromString(value));
  }
}

export class FootyClub extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FootyClub entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FootyClub must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FootyClub", id.toString(), this);
    }
  }

  static load(id: string): FootyClub | null {
    return changetype<FootyClub | null>(store.get("FootyClub", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get footyNouns(): Array<string> {
    let value = this.get("footyNouns");
    return value!.toStringArray();
  }

  set footyNouns(value: Array<string>) {
    this.set("footyNouns", Value.fromStringArray(value));
  }
}
